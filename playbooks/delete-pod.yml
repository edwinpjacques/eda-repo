---
- name: Gather Apstra facts
  hosts: localhost
  gather_facts: false
  connection: local
  collections:
    - junipernetworks.apstra
    - ansible.eda
    - dynatrace.event_driven_ansible
    - kubealex.eda
    - kubealex.general
    - redhatinsights.eda
    - sabre1041.eda
    - community.general
  environment:
    APSTRA_API_URL: "https://10.87.2.40/api"
    APSTRA_USERNAME: "admin"
    APSTRA_PASSWORD: "Apstramarvis@123"
    APSTRA_VERIFY_CERTIFICATES: 0
  vars:
    namespace: "{{ ns }}"
    annotations: "{{ annotate }}"
    event: "{{ ev }}"
  tasks:

    - name: print event.metadata.deletionTimestamp
      debug:
        msg: "{{ event.resource.metadata.deletionTimestamp }}"
      when: event.resource.metadata.deletionTimestamp is defined

    - name: Check if deletionTimestamp is defined
      ansible.builtin.set_fact:
        deletion_timestamp: "{{ event.resource.metadata.deletionTimestamp | default(None) }}"

    - name: Exit if deletionTimestamp is not defined
      ansible.builtin.meta: end_play
      when: deletion_timestamp == ""
      vars:
        msg: "Deletion timestamp not found: {{ deletion_timestamp }}"

    - name: Get the name of the pod
      set_fact:
        pod_name: "{{ event.resource.metadata.name }}"

    - name: Get the name of the namespace
      set_fact:
        namespace: "{{ event.resource.metadata.namespace }}"

    - name: Get the annotations of the pod
      set_fact:
        pod_annotations: "{{ event.resource.metadata.annotations }}"

    - name: Extract network names from network-status annotation
      set_fact:
        network_names: >-
          {{
            pod_annotations['k8s.v1.cni.cncf.io/network-status'] | from_json | json_query("[].name")
          }}

    - name: Debug network names
      debug:
        msg: "Network names: {{ network_names }}"

    - name: Extract PCI address for each network (excluding ovn-kubernetes)
      set_fact:
        pci_addresses: >-
          {{
            pod_annotations['k8s.v1.cni.cncf.io/network-status'] | from_json | selectattr('name', 'ne', 'ovn-kubernetes') | selectattr('device-info.type', 'eq', 'pci') | map(attribute='device-info.pci.pci-address') | list
          }}

    - name: Debug PCI addresses
      debug:
        msg: "PCI addresses: {{ pci_addresses }}"

    - name: Convert pci_addresses to a string
      set_fact:
        pci_addresses_string: "{{ pci_addresses | join(', ')  }}"

    - name: Extract node name from pod spec
      set_fact:
        node_name: "{{ event.resource.spec.nodeName }}"

    - name: Debug node name
      debug:
        msg: "Node name: {{ node_name }}"

    - name: Get SriovNetworkNodeState for the node
      k8s_info:
        api_version: sriovnetwork.openshift.io/v1
        kind: SriovNetworkNodeState
        name: "{{ node_name }}"
        namespace: openshift-sriov-network-operator
      register: sriov_node_state

    - name: Initialize physical interfaces list
      set_fact:
        physical_interfaces: []

    - name: Extract physical interface for each PCI address
      set_fact:
        interfaces: "{{ sriov_node_state.resources[0].status.interfaces }}"

    - name: Get list of all PCI addresses
      set_fact:
        all_pci_addresses: >-
          {{
            interfaces | map(attribute='Vfs') | map('map', attribute='pciAddress') | flatten
          }}

    - name: Debug all PCI addresses
      debug:
        msg: "All PCI addresses: {{ all_pci_addresses }}"

    
    - name: Find only the PCI addresses that are in the list of PCI addresses
      set_fact:
        filtered_pci_addresses: >-
          {{
            pci_addresses | select('in', all_pci_addresses) | list
          }}

    - name: Print interfaces
      ansible.builtin.set_fact:
        pci_interface: "{{ interfaces | map(attribute='Vfs') | map('map', attribute='pciAddress') | zip(interfaces | map(attribute='name')) | from_yaml }}"

    - name: Debug pci_interface
      debug:
        msg: "Interfaces: {{ pci_interface | to_nice_json }}"

    - name: Create a map of interface names to their VF PCI addresses
      set_fact:
        map_interfaces: >-
          {{
            dict(
              interfaces | map(attribute='name') | zip(
                interfaces |  map(attribute='Vfs') | map('map', attribute='pciAddress') | map('list')
              )
            )
          }}

    - name: Debug map_interfaces
      debug:
        msg: "Map Interfaces: {{ map_interfaces | to_nice_json }}"

    - name: Initialize the PCI to name map
      set_fact:
        pci_to_name_map: {}

    - name: Populate the PCI to name map with interface names
      set_fact:
        pci_to_name_map: "{{ pci_to_name_map | combine({ item.pciAddress: item.name }) }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: item

    - name: Gather all VFs into a single list with their parent interface names
      set_fact:
        all_vfs: "{{ all_vfs | default([]) + vfs_with_interface }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: interface
      vars:
        vfs_with_interface: "{{ interface.Vfs | map('combine', {'interface_name': interface.name}) | list }}"

    - name: Populate the PCI to name map with VF names
      set_fact:
        pci_to_name_map: "{{ pci_to_name_map | combine({ vf.pciAddress: vf.interface_name }) }}"
      loop: "{{ all_vfs }}"
      loop_control:
        loop_var: vf

    - name: Display the PCI address to interface name map
      debug:
        var: pci_to_name_map

    - name: Get one value
      set_fact:
        vf_pci: "{{ item | extract(pci_to_name_map) }}"
      with_items: "{{ pci_addresses }}"


    - name: Get NodeNetworkState for the node
      k8s_info:
        api_version: nmstate.io/v1beta1
        kind: NodeNetworkState
        name: "{{ node_name }}"
      register: node_network_state

    - name: Get the remote interface in json
      set_fact:
        remote_interface_json: "{{ node_network_state.resources[0].status.currentState.interfaces | selectattr('name', 'eq', item | extract(pci_to_name_map)) | list }}"
      with_items: "{{ pci_addresses }}"

    - name: Get remote interface name
      set_fact:
        remote_interface_name: "{{ remote_interface_json[0].lldp.neighbors }}"

    - name: Initialize node to port-id map
      set_fact:
        node_to_portid_map: {}

    - name: Debug node network state
      debug:
        var: node_network_state.resources[0].status.currentState.interfaces

    - name: Populate the node to port-id map
      set_fact:
        node_to_portid_map: "{{ node_to_portid_map | combine({ item.name: port_id }) }}"
      loop: "{{ node_network_state.resources[0].status.currentState.interfaces }}"
      loop_control:
        loop_var: item
      vars:
        port_id: >-
          {{
            (item.lldp.neighbors[0] | selectattr('port-id', 'defined') | map(attribute='port-id') | first | default(''))
            if item.lldp is defined and item.lldp.enabled and item.lldp.neighbors | length > 0 else ''
          }}

    - name: Display the node to port-id map
      debug:
        msg: "Node to Port-ID Map: {{ node_to_portid_map }}"

    - name: Find all the name of nodes for the pci addresses and corresponding port-id
      set_fact:
        node_portid: "{{ pci_addresses | map('extract', pci_to_name_map) | map('extract', node_to_portid_map) | list }}"

    - name: Debug node network state
      debug:
        var: node_portid

    - name: Initialize application points
      set_fact:
        application_points: []

    - name: Generate application points
      set_fact:
        application_points: "{{ application_points + [{'if_name': item, 'used': false}] }}"
      loop: "{{ node_portid }}"
      when: item != ''

    - name: Display application points
      set_fact:
        application_points: "{{ application_points }}"

    - name: Connect to Apstra
      junipernetworks.apstra.authenticate:
        verify_certificates: false
        logout: false
      register: auth

    - name: Extract blueprint with default and convert to string
      set_fact:
        bluprint_label_value: "{{ (annotations['k8s.v1.cni.cncf.io/ep'] | regex_search('\"blueprint\": \"([^\"]+)\"', '\\1') | first) | string }}"
    
    - name: Extract virtual network label value
      set_fact:
        vnet_label_value: "{{ (annotations['k8s.v1.cni.cncf.io/ep'] | regex_search('\"vnet_label\": \"([^\"]+)\"', '\\1') | first) | string }}"

    - name: Get blueprint
      junipernetworks.apstra.blueprint:
        body:
          label: "{{ bluprint_label_value }}"
        auth_token: "{{ auth.token }}"
      register: bp

    - name: Update an endpoint policy application point
      junipernetworks.apstra.endpoint_policy:
        id: "{{ bp.id }}"
        virtual_network_label: "{{ vnet_label_value }}"
        body:
          application_points: "{{ application_points }}"
        state: present

    - name: Unlock the  blueprint
      junipernetworks.apstra.blueprint:
        id: "{{ bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_unlock

    - name: Commit the blueprint
      junipernetworks.apstra.blueprint:
        id: "{{ bp.id }}"
        lock_state: "ignore"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit
    


